<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webrtc on 我的乐与怒</title>
    <link>/tags/webrtc/</link>
    <description>Recent content in webrtc on 我的乐与怒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 01 Dec 2022 10:00:00 +0000</lastBuildDate><atom:link href="/tags/webrtc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>开发一个基于WEB的AR应用</title>
      <link>/post/2022-12-01-implement-a-web-ar-app/</link>
      <pubDate>Thu, 01 Dec 2022 10:00:00 +0000</pubDate>
      
      <guid>/post/2022-12-01-implement-a-web-ar-app/</guid>
      <description>AR.js AR.js 是用于 Web 增强现实的轻量级库，具有图像跟踪、基于位置的 AR 和标记跟踪等功能。 github 地址 : https://github.com/AR-js-org/AR.js 文档: https://ar-js-org.github.io/AR.js-Docs/ 基于位置的AR gps-camera 组件 场景中允许一个该对象,将该对象绑定到 camera 实体.用于捕捉设备的运动和摄像机进行关联,处理旋转 位置等变化. &amp;lt;a-camera gps-camera rotation-reader&amp;gt;&amp;lt;/a-camera&amp;gt; rotation-reader 用于处理旋转事件.参考AFrame文档 https://aframe.io/docs/0.9.0/components/camera.html#reading-position-or-rotation-of-the-camera gps-entity-place 组件 场景中允许多</description>
    </item>
    
    <item>
      <title>WebRTC技术简介-RTCDataChannel</title>
      <link>/post/2018-12-14-get-start-with-webrtc-data-channel/</link>
      <pubDate>Fri, 14 Dec 2018 15:31:00 +0000</pubDate>
      
      <guid>/post/2018-12-14-get-start-with-webrtc-data-channel/</guid>
      <description>RTCDataChannel WebRTC可以像音频和视频一样支持实时通讯来传输其他类型的数据. RTCDataChannel API可以使端到端进行任意数据的交换,保持低延迟和高吞吐量.这里有一些单页DEMO可供参考. webrtc.github.io/samples/#datachannel 和 WebRTC codelab 展示了如何建立一个简单的文件传输应用. 这个API可以应用到很多业务场景: 游戏 远程控制应用 实时文字聊天 文件传输 去</description>
    </item>
    
    <item>
      <title>WebRTC技术简介-RTCPeerConnection</title>
      <link>/post/2018-11-14-get-start-with-webrtc-peer-connection/</link>
      <pubDate>Wed, 14 Nov 2018 15:31:00 +0000</pubDate>
      
      <guid>/post/2018-11-14-get-start-with-webrtc-peer-connection/</guid>
      <description>第一个WebRPC应用 WebRPC 需要做以下的几件事: 获取音频,视频或者其他数据 获取网络信息比如IP地址,端口,并与其他的WebRTC客户端进行交换,穿过NAT合防火墙进行连接. 处理信号以便发起请求报告错误或者关闭会话 交换客户端支持的媒体信息,比如分辨率,解码器 传输音频视频流或者数据 为了获</description>
    </item>
    
    <item>
      <title>WebRTC技术简介-获取媒体</title>
      <link>/post/2018-11-09-get-start-with-webrtc-get-media/</link>
      <pubDate>Fri, 09 Nov 2018 15:31:00 +0000</pubDate>
      
      <guid>/post/2018-11-09-get-start-with-webrtc-get-media/</guid>
      <description>Google I/O 的介绍 https://youtu.be/p2HzZkd2A40 1 .通过getUserMedia()使用摄像头和麦克风 通过 getUserMedia()我们可以在不使用任何插件的情况下访问到摄像头和麦克风. 特性检查 只需要检查navigator.mediaDevices.getUserMedia对象是否存在就可以了 function hasGetUserMedia() { return !!(navigator.mediaDevices &amp;amp;&amp;amp; navigator.mediaDevices.getUserMedia); } if (hasGetUserMedia())</description>
    </item>
    
  </channel>
</rss>
